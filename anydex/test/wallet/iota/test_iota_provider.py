from iota.crypto.types import Seed
from iota.transaction import ProposedTransaction, Bundle, Transaction
from iota.types import Address
from ipv8.util import succeed

from anydex.test.base import AbstractServer
from anydex.wallet.iota.iota_provider import PyOTAIotaProvider


class TestIotaProvider(AbstractServer):

    node = 'https://nodes.comnet.thetangle.org:443'
    seed = 'BZTTWRWPZWQDCQRXEJNGVZJUBPRDYRNSQZIZOVGLDJIRRAXFJTZOUDVOBJ9I9CIKX99KVZDLKIWMYQDZK'
    seed_address = 'RGJLBAMAXIUHYPVAPKGVGGHTWXYJHVVQD9TDEVRWJKUINBNATQIBBNNHMOYBBWVXCQQHZJBXDCNJCJFCY'

    transaction_tryte = [
        'NY9PEUUVPCHCKQLVYHTYUCVUTQTQZASPXVDCPGLHVJXCFOUGFRSNZGGYSAXICHGRQGWNEKOXKDSYSIDZBVWYQZKJETKOFHPAWLPGCTMYGY'
        'KOTNZNGQKBUMXTDDTZYSRPTEBQVIDNGEXCQORA999JDOIFW9LWDGMSG9YCI9MYYEQMWGGWPNHKPUFJBYBSZ9PZSRWZRGTVIGMTQOBKKWEU'
        'IWZJYEOGXMEVXBKFVENVGGPAUKHHFACVWKDOCNRUWITYPTBSMFZGTFDJEZAFJEFKXYZABDGBOCVUSTHGIJZ9AAWS9URSQBHWDSHVHJGWGF'
        'OMJWIAQMJRXJRTGIGPWLKDHSJYLBE9LXJUOTKLHY9QJLSBNXOVVTZHLVJ9C9XZYLFUTAYGODZLEX9LUKP9OYUAWIK9HSBOKLWJWPTMZQMY'
        'RSVCRVZKXJOAZCOJLDLKJW9XYFJCYFUDPWOERAXVNULVRM9FWXSENRMYPRFECDGYPY9EBCJHIXQYKCKBKF9SXWZDLBUUAKTGPJVKSXQYKC'
        'FGEMJNHRYYUAQRYKAOZLVK9JXSCNBYHPHFLPYJAOLFXFHAFCRORHLTTOSUNEOU9F9RHLXMCMIITIGJHTHAWKYJAPBWHUOKRGP9GRNSBJFX'
        'WCZRKNWLQOCWOPFX9QACUFLVRS9OVCSDA9PCIKTUOFYYXMJFRENZFYFXNDBVMUYGLHMCZQWNYUGHKOBWKWMWUKD9DALLYOH9UUKAGX9BKK'
        'PMOFAVRXHUACUQZSACNV9GRJYUVB9HQBOMVYOTZPOPAGTZGLERBMJAMDVHBWKDDSGZY9JRBGPM9VLONA9JJFFNZGMJIUDQQDGV9M9TAMLU'
        'UYRILOIEO9KXAMB9LQHFEPTRDUYAGQUIRWOYPRJDZE9HOXGZNTNOBAJOCOCZPEWXTAXQSYRRELSFMHOBZKSLBBAY9WXXMTAJTLSRKNCJYH'
        'JBHRYSRBOXSVLSMPFANYGUCTCKJRONHIEMFSYWOCAENCBIZSHNHMLWVNHPZCCZIUITFHJWEH9KWKDLHDMIFVCKDES9ZCQUVABBC9JWVFUN'
        'KGPKMTZRJVQFQRPAEXRESKWYEFHKXGYGIPRZAMNFKIQCUISVBRWPAXRJV9KWNYAUOLG9ZLYVEANW9HREMZMWDDLTTXJFWWGFYBQHOIYSRW'
        'RDUAWO99QEDYBNFXVRLNPT9PNFY9JRCPRFYZRGZTWI9NMJAP9EMBFJZWBVRWJRQZOXWNX9WXGKRCEOJEFF9LVDBWXMBCUXRBDDBEQFFJGD'
        'DYFRNICYPMKUCSIMGOXDNXEBGZHNXZVHNBSGJHPJASSXIPKXCESLZWZXDIJMY9LJURHMPZ9XUXLGINIELRWZWDF9AJLZBEVBBELCCYYTBR'
        'CQPYAEEBAWGBHRENIMOPQQMWOUKPVYBQYB9KXE9ZFQQRIUHYJFO9UMKSEYRMAPZFFFDZATENXPBQCENWXZDCEIEEOGZJYFQAWNRGEOGFQO'
        'PY9XFQPSOVMKHB9OOTNQXAYMNMWFAHGSMVHVF9SJQXLVHMQAWHLLQSBTCMDUJJQVTHJKHW9IIJSNQTOQSXPPIYDHXAQRMMUTGXLFFXXHTQ'
        'LZFWSNRGWOHRWWBCRSJPUVTBETZPEYKQNMZORJRLJOTIQRZUEOQWUAWXIUZLANIDWIBWQWTNOSLPVKGPZYTEOMJPO9VOLLCJOKRUTWVU99'
        'YNNCZSI9AWPYMOSFNDQCPSMIQBZXBMTVYSTWRWRDKQJSUCPPHKRXWDYNXVUZEYVNBEXAZVHUWWRVDQ9TMSHUZWRMBEU9DTYMCHXHMIPMPC'
        'SLLYYWSLQKYSCFUKUHSBIWIPJSMAOEV9ZXEMUWPAPITNPSBYDCZPCKBMHXBVXXHJCOGQ9LJQWD9RUCXISXLDCNPYACEGXTHYAEVJYARYKF'
        'KYJBNM9XFHKVHAYNDQCZWPAHKGVOKPNPCKOWNUQI9KKYUVWHFTTGBEKRXCKJTECMARAS9ACMBWQOYLUMPR9LDADMAVRISEWDAYRHEPLPGX'
        'FFIIGNSIRWWHEHLXAOPPHQOJSDAFRSATZEM9CWD9IWP9OXOBAGZVXNXBOSJOVFJKSXEXUGTCVWZU9UODR9WBD9LD9BBCEOECFUIAIKZBEH'
        'VWIZIUVCOOJGLPSAW9JDGPDZQJOVBEHVUJPYHVFEDTOSBUVRLUXDFTWZKEMIQZLLJBZRGJLBAMAXIUHYPVAPKGVGGHTWXYJHVVQD9TDEVR'
        'WJKUINBNATQIBBNNHMOYBBWVXCQQHZJBXDCNJCJFCY999999999999999999999999999999999999999999999999999999QYSDWCD99B'
        '99999999C999999999TWJTTHEDVBCIFFBAAUPDEHKVJBPYJCIAROHABAUIWC9WD9XGGG9TSEQZBEHCSBN9LDOFCNVLQK9YJE9ZZRDDKYIW'
        'TUORFYN9PKRVDLCEJ9ZIOFLYBHVBHJKCBZVLVKWXHJLRRIWSMRQUNAI9CVOISQD9J9ISVO999PXFKCRCIWSRNTYNGTJJ9VEXL9LAXDVA9W'
        'MGGKRALVOKBNWYWVARYXZPBMEESSZCSSPAAJRXOPDVGGT999999999999999999999999999999FKPBYVBQF999999999MMMMMMMMMARTF'
        'KPAYUZWLZNVDTMWEGUFN9QL'
    ]
    seed_transactions_trytes = [
        Transaction.from_tryte_string(
            'LEINZHQPBKVSEFVJELUKLRKRLIVSBMEMFQNXVGZYPPPU9LMWUQTAAIZKYPIOKRKPGYCIIGLKVJSBANCZWEIZAKRJDKKWJVVLVSDOMU'
            'YWZE9YOGGSLNNWIZMLDZG9KMKWVRCHHJVCAXBSNBYNTQOJORNFUOJWNMNLNDDEQMTUBJXRDNLUBRFRRMCYUTLQJAMBWWHXFOZHFAPF'
            'ANADVQBLQZGIHHTVGBEU9SUDQY9DOIKQXUFPOIBBXBEKZXHWXPQDUPYOTDG9RQWMADJYYRVJPLWKRYIZZOVRLZSHQGSWTRCWJFTUEX'
            'VQWSMFJTPPAMLDDJHZYXXBHNYLSYFUBJRPXZGCZTJJVVWJDIKPIZJCSPMEZZ9ODGB9OSHSHGWVXEPTSXIFHWNUPW9EMFZCBAJUAYZJ'
            '9OLPDNGRMHLZUTORRNHPBZNEPFCUOGJCBPNATBLNLKHHFZZPVPJWBZPOLEDMQMCLEOBCYGDHXWWUVWOQXWJTFYXYNEAOWTDWPDUCEM'
            'RCMFYLX9LETQLHFNAMKUBULSGBXPBUWZXGG9HGCHWOLKSXOBLWDJKXJEZGZOZIIHBCKENJHJYGU9OPPUPDJJYYKUOLOMXCHYDCPZNS'
            'GSQCHMRKYZUBLRIUHIFMTAGPUPXJCFICJWYXFTMQFJVEJSEZZLXLUNQQSDKQHQNGWRRAXRQGVRYFELRXYDDANGNDUJBTYOUHBAOOWI'
            'NZPULTCNLUDKFSCOFFU9ALNCUGWXCHFUCHX9ZXUDKVXF9PLRONQJUZIOGK9BLRLE9OYPDWQQQX9SCYZTKHZJVATWZFWMMNAZHXFIOU'
            '9NSDFFPDABYHHCWJNKNSPDZUBZWRZZRMLEXTVMIFGXBDXQXRIUEJBSLIYMLFB9AKJIEOKGSNKQXJXIEOPEIDDSCS9VCBYPDEJMHOHP'
            'FAFO9RBCYQXSZDOSYCAF9TSYNLXIIAKSUHMOTTFLJMRSWVCGLYRNTXEYGQNLOXPCXPVKXNSZKLIPUQUV9FOSGNBX9GDPXYEIORUOBV'
            'PGHRPVTFTYGWVWAFY9FZQMUEQZAUNRWRYZOLLDSFZEQ9URFKJPBWPGHSFMGDVCBVMPGMXYXYQNOKJWYNSGRTOYAHBGZVFHNAPMIPFL'
            'RYIXCJLAGMNWJIYUHYKI9XYXKOQXJACTNJPPIUJQMZIULCIOS9QZULITPLGSXOTLGJJSJJVMQYXCFMLPABVMYGGMDIKMCJDWCRIXTD'
            'QLGUTGSKOVBPOHANUUNNGPMJXGDSQCSJLGBVIHCNUGJETWGWCHSWXPNXAYRTLCQAULPMH9ICKAJPSL9ZLFAQNGHYVJSNSYLBUJXTGJ'
            'COTJPVCGNPVJDWWBAMKHEVNAVCOJRCLKKVJPPIKDGSHZGJTBPUXEAINWUWTQJ9VLFBFDRFWSTRCGLSWCJLDBPYCWLSTBGZ9VDTQOJT'
            'SNT9JCTYCTQGBMJEXIPSDRGAZ9IALDZES9FBYLMTELZYEKPOKARSQZAKEMOLHAG9XVISPQMKHRZXEJFAYSRQCAHO9SOJHFDPLUYGOP'
            'AQCOYIPBXJVZRBHOVQWKOMX9LMGEZSCOGL9TVLPUPBLRBPSASDMMWUHAEIHZYMGWBVXVYIUGERMXUEZKJGDDJCWFIXXDOMRKODKIZY'
            'PSYL9AXKIUIQBWZDVLSOFOGHVXEBZWPMPNLUZURDRNQKURCXVRIBYGOJGCV9LGCZFCP9DOYNZNPSSSWQQJOOBCTNFUKKRKI9YWQPST'
            'EPIPREBRBEDIOWMXTYO9QFZGPDVABIMDDDZKCLWH9JQJYZQYHDLTAJLFBJHEMDYQXNW9VSHMGG9NZOCLTUHLPYAHHQM9JQACPYWOKN'
            'VKXFXXRDHQERUWDLYOOZJ9TOJZDYNTSGHXTP9ZJTWAVDHLFYOKMXJC9EXUXT9OAM9OIWKCETJBPFVBNA9JIXSWVLKWTSGLSOAWUVUB'
            'WJPOGDPGQCTPQEEVJLMNYHZIYPJPI9MRONVLWV9MIVWGRVPWWRQUBPVVQVHEAMQQROCLZTR9AVKXASYQEIRCWC9PPWVJWVNXMTFAOM'
            'BTSFHMJNYPHDUCYZFNXZCDSX9WDQQMKJ9KAWEILQUIW9EKXTGYXUCPGGRQMJFJVKDCHSXIAOFQMOHRPWNOVSHMMKVOTWV9MLRIZZRH'
            'YJXBFGAXEOHNWFBWT9MTRMUSZAJNMCXRZAS9YJ9VXBGNZPUKLSGSYSWQCLQPEAJ9JDOPL9Z9PJGASKMGFQASCXQQD9IYU9XNLNUPTN'
            'KPLFRQDLZOOKKCCDUNFYGFCW999999999999999999999999999999999999999999999999999999RBSDWCD99B99999999C99999'
            '999GLGANLOPBCZCIXQYAZIJHSZYKTEKASBFQOHRWFLWOHYEQXEBCGKUUFNUDFFVQNEKYPZEASHEBIOFSLYFWG9JEQJDNLFZTHVTNQO'
            'VYOGTH9TGLEIUBBGUUKNJIOGBDZRJ9PUYO9PEYUANHOPPTRLBEYFLOBIHUKW999IFEPDTOCAHE9TWFDPYXUAGU9MOTFLZRJZVPLDVA'
            'GMBMFOMMVRQBTDUANRPE9MYTMVRWPYRDWXNISJQ999999999999999999999999999999EHFGYVBQF999999999MMMMMMMMMM9DGEY'
            'LIZOIQB9SFSCIUKPEVD9J'),
        Transaction.from_tryte_string(
            '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
            '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
            '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
            '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
            '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
            '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
            '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
            '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
            '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
            '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
            '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
            '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
            '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
            '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
            '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
            '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
            '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
            '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
            '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
            '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
            '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
            '999999999999999999999999999999999999999999999RGJLBAMAXIUHYPVAPKGVGGHTWXYJHVVQD9TDEVRWJKUINBNATQIBBNNHM'
            'OYBBWVXCQQHZJBXDCNJCJFCY999999999999999999999999999SB9999999999999999999999999NUJCWCD99999999999999999'
            '999VJCAOVXLZL9XEGSFSNAPG9KVIY9TCFDHFRXXJIWPZSEFVAKOHQCLDJJFBPBHVLART9BCXGBVJ9OXXCGSXFNILHXPKKUBQJPAUOO'
            'SBEFIGGTPVNCJLGWOSHGNKCFZCGIANMPJB9UCEFJMVI9BFYLLRUVPCCVFRDF999FNILHXPKKUBQJPAUOOSBEFIGGTPVNCJLGWOSHGN'
            'KCFZCGIANMPJB9UCEFJMVI9BFYLLRUVPCCVFRDF999SB9999999999999999999999999HBSNMUBQF999999999MMMMMMMMMFUMSRI'
            'ATHUEKBDFFCBIWTHLM9V9')
    ]

    def setUp(self):
        super().setUp()
        self.provider = PyOTAIotaProvider(testnet=True, node=self.node, seed=self.seed)

    async def test_initialize_api_correct_seed(self):
        """
        Test with a newly created seed. Balance should be zero
        """
        seed = Seed.random()
        provider = PyOTAIotaProvider(testnet=True, node=self.node, seed=seed)
        provider.async_api.get_account_data = lambda: succeed({'balance': 0})
        self.assertEqual(await provider.get_seed_balance(), 0)

    async def test_submit_transaction(self):
        """
        Test bundle containing transaction returned when transaction is submitted
        """
        bundle = Bundle([Transaction.from_tryte_string(self.transaction_tryte[0])])
        self.provider.async_api.send_transfer = lambda transfers, min_weight_magnitude: succeed({'bundle': bundle})
        transaction = ProposedTransaction(
            address=Address(
                Transaction.as_json_compatible(Transaction.from_tryte_string(self.transaction_tryte[0]))['address']),
            value=Transaction.as_json_compatible(Transaction.from_tryte_string(self.transaction_tryte[0]))['value']
        )
        self.assertEqual(bundle, await self.provider.submit_transaction(tx=transaction))

    async def test_get_balance(self):
        """
        Test correct balance returned
        """
        self.provider.async_api.get_balances = lambda addresses: succeed({'balances': [4]})
        self.assertEqual(await self.provider.get_balance(address=[Address(self.seed_address)]), 4)

    async def test_get_seed_balance(self):
        """
        Test correct seed balance retrieved
        """
        # TODO: This fails when run with the class, but not individually
        self.provider.async_api.get_account_data = lambda: succeed({'balance': 996})
        self.assertEqual(await self.provider.get_seed_balance(), 996)

    async def test_get_transactions(self):
        """
        Test correct transactions returned with a valid address
        """
        self.provider.async_api.find_transaction_objects = lambda addresses: succeed(self.transaction_tryte)
        self.assertEqual(await self.provider.get_transactions(address=[Address(self.seed_address)]),
                         self.transaction_tryte)

    async def test_get_seed_transactions(self):
        """
        Test all transactions are obtained from the seed's addresses
        """
        self.provider.update_account_data = lambda: succeed(None)
        self.provider.account_data = {'addresses': Address(self.seed_address)}
        self.provider.async_api.find_transaction_objects = lambda addresses: \
            succeed({'transactions': self.seed_transactions_trytes})
        self.assertEqual(await self.provider.get_seed_transactions(), self.seed_transactions_trytes)

    async def test_get_all_bundles(self):
        """
        Test all bundles are returned associated with the seed
        """
        bundle1 = Bundle([self.seed_transactions_trytes[0]])
        bundle2 = Bundle([self.seed_transactions_trytes[1]])
        bundles = [bundle1, bundle2]
        self.provider.async_api.get_account_data = lambda: succeed({'bundles': bundles})
        self.assertListEqual(bundles, await self.provider.get_all_bundles())

    async def test_generate_address(self):
        """
        Test a new generated unused address is returned
        """
        self.provider.async_api.get_new_addresses = lambda index, count, security_level: \
            succeed({'addresses': [Address(self.seed_address)]})
        new_address = await self.provider.generate_address(0)
        self.assertEqual(new_address, self.seed_address)

    async def test_is_spent_true(self):
        """
        Test whether is_spent attribute is true for addresses spent from
        """
        self.provider.async_api.were_addresses_spent_from = lambda *_: succeed({'states': [True], 'duration': 0})
        is_spent = await self.provider.is_spent(Address(self.seed_address))
        self.assertTrue(is_spent)

    async def test_is_spent_false(self):
        """
        Test whether is_spent attribute is false for unspent addresses
        """
        self.provider.async_api.were_addresses_spent_from = lambda *_: succeed({'states': [False], 'duration': 0})
        is_spent = await self.provider.is_spent(Address(self.seed_address))
        self.assertFalse(is_spent)

    async def test_get_confirmations_true(self):
        """
        Test get_confirmation attribute is true for confirmed transactions
        """
        self.provider.async_api.get_inclusion_states = lambda *_: succeed({'states': [True]})
        tx_hashes = [Transaction.as_json_compatible(self.seed_transactions_trytes[0])['hash_'],
                     Transaction.as_json_compatible(self.seed_transactions_trytes[1])['hash_']]
        is_confirmed = await self.provider.get_confirmations(tx_hashes)
        self.assertTrue(is_confirmed)

    async def test_get_confirmations_false(self):
        """
        Test get_confirmation attribute is false for unconfirmed transactions
        """
        self.provider.async_api.get_inclusion_states = lambda *_: succeed({'states': [False]})
        tx_hashes = [Transaction.as_json_compatible(self.seed_transactions_trytes[0])['hash_'],
                     Transaction.as_json_compatible(self.seed_transactions_trytes[1])['hash_']]
        is_confirmed = await self.provider.get_confirmations(tx_hashes)
        self.assertFalse(is_confirmed)
